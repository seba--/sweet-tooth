module regex/RegexAsString

 imports org/sugarj/java/init/InitTrans org/sugarj/languages/Java regex/Regex


strategies
  desugar =
    changed-tree(regexAsString)


rules

  main =
    regexAsString

  regexAsString :
    delimited-regex(e) -> Lit(
                            String(
                              [Chars(<r2str> e)]
                            )
                          )


rules

  r2str :
    regex-lit(lit) -> lit
    where <elem> ( lit
                 , [ "\\\\"
                   , "\\t"
                   , "\\n"
                   , "\\r"
                   , "\\f"
                   , "\\a"
                   , "\\e"
                   ]
                 )

  r2str :
    regex-lit(lit) -> <string-replace(|"\\", "\\\\")> lit
    where <not(elem)> ( lit
                      , [ "\\\\"
                        , "\\t"
                        , "\\n"
                        , "\\r"
                        , "\\f"
                        , "\\a"
                        , "\\e"
                        ]
                      )

  r2str :
    regex-ccexp(ce) -> <conc-strings> ("[", <ce2str> ce, "]")

  r2str :
    regex-option(e) -> <conc-strings> ("?", <r2str> e)

  r2str :
    regex-many(e) -> <conc-strings> (<r2str> e, "*")

  r2str :
    regex-many1(e) -> <conc-strings> (<r2str> e, "+")

  r2str :
    regex-sequence(e1, e2) -> <conc-strings> (<r2str> e1, <r2str> e2)

  r2str :
    regex-alternative(e1, e2) -> <conc-strings> ( <r2str> e1
                                                , "|"
                                                , <r2str> e2
                                                )

  r2str :
    regex-group(e) -> <conc-strings> ("(", <r2str> e, ")")

  r2str :
    regex-ccexp-predefined(e) -> <conc-strings> ("\\", e)


rules


  ce2str =
    ce2str-lit <+
    ce2str-range <+
    ce2str-negation <+
    ce2str-union <+
    ce2str-intersection <+
    ce2str-predefined-dot <+
    ce2str-predefined-other

  ce2str-lit :
    ccexp-lit(lit) -> lit

  ce2str-range :
    ccexp-range(from, to) -> <conc-strings; bracket> (from, "-", to)

  ce2str-negation :
    ccexp-negation(ce) -> <conc-strings; bracket> ("^", <ce2str> ce)

  ce2str-union :
    ccexp-union(ce1, ce2) -> <conc-strings; bracket> (<ce2str> ce1, <ce2str> ce2)

  ce2str-intersection :
    ccexp-intersection(ce1, ce2) -> <conc-strings; bracket> (<ce2str> ce1, "&&", <ce2str> ce2)

  ce2str-predefined-dot :
    ccexp-predefined(".") -> "."

  ce2str-predefined-other :
    ccexp-predefined(e) -> <conc-strings> ("\\", e)


rules

  bracket :
    s -> <conc-strings> ("[", s, "]")