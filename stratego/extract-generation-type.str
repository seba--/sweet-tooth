module extract-generation-type
imports 
  libstratego-lib
imports 
  org/sugarj/languages/Stratego

rules
  main = io-wrap(extra-options,
    extract-generation-type-main)

  extra-options =
    ArgOption(
      "-desugar"
    , rules(DesugarName := <id>)
    , !"-desugar <strategy-name> Name of the desugaring strategy."
    )

rules // extract type
  extract-generation-type-main = 
      ?Specification([_,Strategies(<id>)])
    ; rules ( AllStrats := <id> )
    ; <set-current-type> <next-unknown-type>
    ; <lookup-strategy> <DesugarName>
    ; ?SDefT(_, [], [], <id>)
    ; extract-generation-type


  extract-generation-type =
      ?Scope(vars, body)
        // TODO only scope `vars`, not all of the environment
    ; { Env:
        <extract-generation-type> body
      }

  extract-generation-type =
      ?Seq(s1, s2)
    ; <extract-generation-type> s1
    ; <extract-generation-type> s2

  extract-generation-type =
      ?Match(pat)
    ; !(pat, <get-current-type>)
    ; match-pat

  extract-generation-type =
      ?Build(temp)
    ; <extract-generation-type-from-term> temp
    ; set-current-type

  extract-generation-type =
      ?CallT(SVar(name), strats, terms)
    ; <lookup-strategy> name
    ; ?SDefT(_, vstrats, vterms, body)
    ; <map(extract-generation-type-from-term)> terms => types
    ; { LocalStrats, Env:
          <bind-strats> (vstrats, strats)
        ; <bind-vars> (vterms, types)
        ; <extract-generation-type> body
      }

  extract-generation-type =
      ?GuardedLChoice(cond,s1,s2)
    ; get-current-type => orig-type
    ; <extract-generation-type> cond
    ; <extract-generation-type> s1 => t1
    ; get-current-type => pos-type
    ; <set-current-type> orig-type
    ; <extract-generation-type> s2 => t2
    ; get-current-type => neg-type
      // set current as merge of pos and neg
    ; <alternative-types; set-current-type> (pos-type, neg-type)
      // return result of s1 or s2
    ; <alternative-types> (t1, t2)

  extract-generation-type =
      ?Id()
    ; get-current-type

  extract-generation-type =
    fatal-err(|"extract-generation-type is stuck")

rules // type matching
  match-pat =
      ?( Anno(Op(cons, kids), _)
       , cons#(kids'))
    ; <zip; map(match-pat)> (kids, kids')

  match-pat =
      ?( Anno(Op(cons, kids), _)
       , Unknown(_))
    ; <map(next-unknown-type)> kids => unknown-kids
    ; <zip; map(match-pat)> (kids, unknown-kids)

  match-pat =
      ?( Anno(Str(s), _)
       , s)

  match-pat =
      ?( Var(v)
       , type)
    ; if <lookup-var> v => var-type
        then <match-type> (var-type, type)
        else <bind-var> (v, type)
      end

  match-pat =
    fail; fatal-err(|"match pat is stuck")

rules // term typing
  extract-generation-type-from-term =
      ?Anno(Op(cons, kids), _)  
    ; !cons#(<map(extract-generation-type-from-term)> kids)

  extract-generation-type-from-term =
      ?Anno(Str(s), _)  
    ; !s

  extract-generation-type-from-term =
      ?Var(<id>)
    ; lookup-var

  extract-generation-type-from-term =
    fatal-err(|"extract-generation-type-from-term is stuck")

rules // type matching

  match-type =
    fatal-err(|"match type is stuck")

rules // auxiliary type functions
  set-current-type = rules ( CurrentType := <id> )
  get-current-type = CurrentType
  next-unknown-type = !Unknown(<newname> "X")


  alternative-types = ?(t, t); !t
  alternative-types = 
      ?(c#(kids), c#(kids'))
    ; !c#(<zip; alternative-types> (kids, kids'))
  alternative-types = ?(t1, t2); !Alt(t1, t2)

rules // name binding
  bind-var = 
      ?(name, type)
    ; rules ( Env :+ name -> type )

  bind-vars = ?([],[])
  bind-vars = 
      ?([v|vs], [type|types])
    ; <bind-var> (v, type)
    ; <bind-strats> (vs, types)

  lookup-var = Env

rules // strategy management
  bind-strats = ?([],[])
  bind-strats = 
      ?([v|vs], [strat|strats])
    ; rules ( LocalStrats :+ v -> strat )
    ; <bind-strats> (vs, strats)

  lookup-strategy = ?name; <lookup-strategy(|name)> <AllStrats>

  lookup-strategy(|name) = <LocalStrats> name
  lookup-strategy(|name) = ?[strat@SDefT(name, _, _, _) | _]; !strat
  lookup-strategy(|name) = ?[_ | <lookup-strategy(|name)>]
  lookup-strategy(|name) = <fatal-err(|"Unbound strategy name: ")> name
  
signature constructors
  Unknown : String      -> Type
  Alt     : Type * Type -> Type
