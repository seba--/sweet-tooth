module org/sugarj/transformations/GenerateSignatures

imports org/sugarj/languages/Sdf2
        org/sugarj/languages/Stratego
        org/sugarj/languages/Sugar
        org/sugarj/stdlib/StdTrans

strategies
  desugar =
    changed-tree(gen-signature)


rules

  gen-signature :
    elems -> res
    where <?[<id>|_]; (?grammar-elem(_) + ?transformation-elem(_) + ?editor-elem(_))> elems;
    	   <(map(gen-signature-elem <+ ![<id>])
            ; concat)> elems => res


rules

  gen-signature-elem :
    grammar-elem(grammar) -> [ Locked(grammar-elem(grammar))
                             , transformation-elem(sig)
                             ]
    where <gen-signature-from-grammar> grammar => sig


rules

  gen-signature-from-grammar :
    syntax(productions) -> Signature([Constructors(opdecls)])
    where <(map(ensure-list(gen-opdecl-from-prod)) ; concat)> productions => opdecls

  gen-signature-from-grammar :
    context-free-syntax(productions) -> Signature([Constructors(opdecls)])
    where <(map(ensure-list(gen-opdecl-from-prod)) ; concat)> productions => opdecls

  gen-signature-from-grammar :
    context-free-priorities(productions) -> Signature([Constructors(opdecls)])
    where <collect-all(?prod(_,_,_)); map(ensure-list(gen-opdecl-from-prod)) ; concat> productions => opdecls


rules

  gen-opdecl-from-prod :
    prod(arg-symbols, res-symbol, attributes) -> OpDecl(cons, type)
    where <get-cons-attribute> attributes => cons
          ; <get-prod-type> (arg-symbols, res-symbol) => type

  get-cons-attribute :
    attrs(attributes) -> cons
    where <getfirst(
             ?term(
                default(
                  appl(
                    unquoted("cons")
                  , [fun(quoted(<id>))]
                  )
                )
              )
           )> attributes => consQuoted
          ; <unquote(?'"')> consQuoted => cons

  get-prod-type :
    ([], res) -> type
    where <get-symbol-type> res => type

  get-prod-type :
    (args, res) -> type
    where <(map(ensure-list(get-symbol-type)) ; concat)> args => arg-types
          ; <get-symbol-type> res => res-type
          ; <(?[]
              < !res-type
              + !FunType(arg-types, res-type))> arg-types => type

  ensure-list(s) =
    s
    ; (is-list < id + ![<id>])
    <+ ![]


rules

  get-symbol-type :
    sym -> []
    where <is-layout> sym

  get-symbol-type :
    sym -> ConstType(Sort(name, []))
    where <get-symbol-name> sym => name

  get-symbol-name :
    start() -> "<START>"

  get-symbol-name :
    file-start() -> "<Start>"

  get-symbol-name :
    label(_, sym) -> name
    where <get-symbol-name> sym => name

  get-symbol-name :
    sort(name) -> name

  get-symbol-name :
    parameterized-sort(name, _) -> name

  get-symbol-name :
    lifting(sym) -> name
    where <get-symbol-name> sym => name

  get-symbol-name :
    seq(_, _) -> "seq"

  get-symbol-name :
    opt(_) -> "opt"

  get-symbol-name :
    iter(_) -> "iter"

  get-symbol-name :
    iter-star(_) -> "iter-star"

  get-symbol-name :
    iter-sep(_, _) -> "iter-sep"

  get-symbol-name :
    iter-star-sep(_, _) -> "iter-star-sep"

  get-symbol-name :
    tuple(_, _) -> "tuple"

  get-symbol-name :
    alt(_, _) -> "alt"

  get-symbol-name :
    cf(sym) -> <concat-strings> ["cf", name]
    where <get-symbol-name> sym => name

  get-symbol-name :
    lex(sym) -> <concat-strings> ["lex", name]
    where <get-symbol-name> sym => name

  get-symbol-name :
    varsym(sym) -> <concat-strings> ["var", name]
    where <get-symbol-name> sym => name
    
    
  is-layout = ?layout()
  is-layout = ?cf(<is-layout>)
  is-layout = ?lex(<is-layout>)
  is-layout = ?opt(<is-layout>)
  is-layout = ?iter(<is-layout>)
  is-layout = map(is-layout)
  