module extract-generation-type
imports 
  libstratego-lib
imports 
  org/sugarj/languages/Stratego
imports
  stdlib-generation-types
  simplify-generation-type

rules
  main = io-wrap(extra-options,
    extract-generation-type-main)

  extra-options =
    ArgOption(
      "-desugar"
    , rules(DesugarName := <id>)
    , !"-desugar <strategy-name> Name of the desugaring strategy."
    )

rules // extract type
  extract-generation-type-main = 
      ?Specification([_,Strategies(<id>)])
    ; rules ( AllStrats := <id> )
    ; <set-current-type> <next-unknown-type>
    ; <lookup-strategy <+ fatal-err(|"Desugaring strategy undefined: ")> <DesugarName>
    ; ?SDefT(_, [], [], <id>)
    ; extract-generation-type
    ; simplify-type

//  extract-generation-type = !(<get-current-type>,<id>); debug; fail
//  extract-generation-type = get-current-type; debug; fail

  extract-generation-type =
      ?Scope(vars, body)
        // TODO only scope `vars`, not all of the environment
    ; { Env:
        <extract-generation-type> body
      }

  extract-generation-type =
      ?Seq(s1, s2)
    ; <extract-generation-type> s1
    ; if get-current-type => Empty()
        then !Empty()
        else <extract-generation-type> s2
      end

  extract-generation-type =
      ?Match(pat)
    ; !(pat, <get-current-type>)
    ; if (match-pat <+ !Empty()) => Empty()
        then <set-current-type> Empty(); !Empty()
        else get-current-type
      end

  extract-generation-type =
      ?Build(temp)
    ; <extract-generation-type-from-term> temp
    ; set-current-type

  extract-generation-type =
      ?CallT(SVar(name), strats, terms)
    ; <lookup-strategy> name
    ; ?def@SDefT(_, vstrats, vterms, body)
    ; <map(extract-generation-type-from-term)> terms => types
    ; <push-call> (def, strats, types) => maybe-skip
    ; if <?Some(type)> maybe-skip
        then !type; set-current-type
        else finally(
               { LocalStrats, Env:
                   <bind-strats> (vstrats, strats)
                 ; <bind-vars> (vterms, types)
                 ; <extract-generation-type> body
               }
             , <pop-call> (def, strats, types)
             )
      end

  // call of stdlib function
  extract-generation-type =
      ?CallT(SVar(name), strats, terms)
    ; <not(lookup-strategy)> name
    ; <map(extract-generation-type-from-term)> terms => types
    ; def := SDefT(name, None(), None(), None())
    ; <push-call> (def, strats, types) => maybe-skip
    ; if <?Some(type)> maybe-skip
        then !type
        else finally(
               <stdlib-generation-type> (name, strats, types, <get-current-type>)
             ; set-current-type
             , <pop-call> (def, strats, types)
             )
      end

  extract-generation-type =
      ?GuardedLChoice(cond,s1,s2)
    ; get-current-type
    ; split-type /*!(<get-current-type>, <get-current-type>)*/ => (type1, type2)
    ; <set-current-type> type1

    ; <extract-generation-type> cond
    ; if ?Empty()
        then <set-current-type> type2
           ; <extract-generation-type> s2
        else <extract-generation-type> s1 => t1
           ; get-current-type => pos-type
           ; <set-current-type> type2
           ; <extract-generation-type> s2 => t2
           ; get-current-type => neg-type
           // set current as merge of pos and neg
           ; <alternative-types; set-current-type> (pos-type, neg-type)
           // return result of s1 or s2
           ; <alternative-types> (t1, t2)
      end

  extract-generation-type =
      ?Id()
    ; get-current-type

  extract-generation-type =
    fatal-err(|"extract-generation-type is stuck ")

rules // type matching
  match-pat =
      ?( Unknown(name)
       , Unknown(name))
  match-pat =
      ?( UnknownList(name)
       , UnknownList(name))

  match-pat =
      ?( Unknown(name1)
       , Unknown(name2))
    ; <not(equal)> (name1, name2)
    ; <bind-unknown> (name1, Unknown(name2))
  match-pat =
      ?( UnknownList(name1)
       , UnknownList(name2))
    ; <not(equal)> (name1, name2)
    ; <bind-unknown> (name1, UnknownList(name2))

  match-pat =
      ?( Anno(Op(cons, kids), _)
       , cons#(kids'))
    ; <zip; map(match-pat)> (kids, kids')

  match-pat =
      ?( t@Anno(Op(cons, kids), _)
       , Unknown(name))
    ; <unknown-not-free-in> (name, t)
    ; <map(next-unknown-type)> kids => unknown-kids
    ; <bind-unknown> (name, cons#(unknown-kids))
    ; <zip; map(match-pat)> (kids, unknown-kids)
  match-pat =
      ?( t@Anno(Op(cons, kids), _)
       , UnknownList(name))
    ; fatal-err(|"match-pat unknown list: ")
    ; <unknown-not-free-in> (name, t)
    ; <map(next-unknown-type)> kids => unknown-kids
    ; <bind-unknown> (name, cons#(unknown-kids))
    ; <zip; map(match-pat)> (kids, unknown-kids)

  match-pat =
      ?( Anno(Str(s), _)
       , Str([s]))

  match-pat =
      ?( t@Anno(Str(s), _)
       , Unknown(name))
    ; <unknown-not-free-in> (name, t)
    ; <bind-unknown> (name, Str([<next-unknown-type>]))

  match-pat =
      ?( Var(v)
       , type)
    ; if <lookup-var> v => var-type
        then <match-pat> (<explode-type> var-type, type)
        else <bind-var> (v, type)
      end

  match-pat =
      ?( Wld()
       , _)

  match-pat =
      ?( t@Anno(Explode(term1, term2), _)
       , Unknown(name))
    ; <unknown-not-free-in> (name, t)
    ; <match-pat> (term1, <next-unknown-type>)
    ; <match-pat> (term2, <next-unknown-type>)
  match-pat =
      ?( t@Anno(Explode(term1, term2), _)
       , UnknownList(name))
    ; fatal-err(|"match-pat unknown list: ")
    ; <unknown-not-free-in> (name, t)
    ; <match-pat> (term1, <next-unknown-type>)
    ; <match-pat> (term2, <next-unknown-type>)

//  match-pat =
//      ?( t@Anno(Explode(term1, term2), _)
//       , cons#(kids))
//    ; <match-pat> (term1, Str([cons]))
//    ; <match-pat> (term2, kids)

  match-pat =
      ?( Unknown(name)
       , t)
    ; <unknown-not-free-in> (name, t)
    ; <bind-unknown> (name, t)
  match-pat =
      ?( UnknownList(name)
       , t)
    ; fatal-err(|"match-pat unknown list: ")
    ; <unknown-not-free-in> (name, t)
    ; <bind-unknown> (name, t)

  match-pat =
      ?( t
       , Alt(t1, t2))
    ; <match-pat> (t, t1)
    ; <match-pat> (t, t2)

  match-pat =
      try( not(?(Anno(Op(cons,_),_), cons2#(_)); <not(equal)> (cons,cons2))
         ; debug(!"match pat is stuck "))
    ; !Empty()

rules // term typing
  extract-generation-type-from-term =
      ?Anno(Op("Nil", []), _)  
    ; ![]

  extract-generation-type-from-term =
      ?Anno(Op("Cons", [hd, tl]), _)  
    ; ![<extract-generation-type-from-term> hd | <extract-generation-type-from-term> tl]

  extract-generation-type-from-term =
      ?Anno(Op(cons, kids), _)  
    ; !cons#(<map(extract-generation-type-from-term)> kids)

  extract-generation-type-from-term =
      ?Anno(Str(s), _)  
    ; !Str([s])

  extract-generation-type-from-term =
      ?Var(<id>)
    ; lookup-var

  extract-generation-type-from-term =
    fatal-err(|"extract-generation-type-from-term is stuck")

rules // explode type

  explode-type =
      Unknown(id); resolve-all-unknown
  explode-type =
      UnknownList(id); resolve-all-unknown
  explode-type = 
      ?cons#(kids)
    ; !Anno(Op(cons, <map(explode-type)> kids), [])
  explode-type =
      ?Str(ss)
    ; !Anno(Str(ss), [])
  explode-type =
    fatal-err(|"match type is stuck")

rules // auxiliary type functions
  next-unknown-type = !Unknown(<newname> "X")
  next-unknown-listtype = !UnknownList(<newname> "L")
  unknown-or(s) = ?Unknown(_) <+ s

  alternative-types = ?(t, t); !t
  alternative-types = 
      ?(Unknown(name1), Unknown(name2))
    ; !Alt(Unknown(name1), Unknown(name2))
  alternative-types = 
      ?(UnknownList(name1), UnknownList(name2))
    ; !Alt(UnknownList(name1), UnknownList(name2))
  alternative-types = 
      ?(c#(kids), c#(kids'))
    ; !c#(<zip; map(alternative-types)> (kids, kids'))
  alternative-types =
      ?(Alt(t1,t2), t1)
    ; !Alt(t1,t2)
  alternative-types =
      ?(Alt(t1,t2), t3)
    ; !Alt(t1,<alternative-types> (t2, t3))
  alternative-types = ?(t1, t2); !Alt(t1, t2)

  bind-unknown =
      ?(name, type)
    ; where(try(<resolve-unknown> name; <fatal-err(|"rebound unknown: ")> name))
    ; (id, <alternative-types> (type, <next-unknown-type>))
    ; do-bind-unknown

  do-bind-unknown =
      ?(name, type)
    ; try( may-assign
//         ; debug(!"bind-unknown: ")
         ; rules ( UnknownEnv :+ name -> type)
      )
    ; !type

  UnknownEnv = fail

  split-type =
      ?Unknown(name)
    ; !(<next-unknown-type>, <next-unknown-type>) => (t1,t2)
    ; where(<do-bind-unknown> (name, Alt(t1,t2)))
  split-type =
    fatal-err(|"split type is stuck")

  resolve-unknown =
    ?Unknown(<UnknownEnv>)
  resolve-unknown =
    ?UnknownList(<UnknownEnv>)

  resolve-all-unknown =
      innermost(resolve-unknown)

  unknown-not-free-in =
    ?(name, t); !t; not(collect-one(?Unknown(name) + ?UnknownList(name)))

rules // name binding
  bind-var = 
      ?(name, type)
    ; try( may-assign
//       ; debug(!"bind var: ")
         ; rules ( Env :+ name -> type ))

  bind-vars = ?([],[])
  bind-vars = 
      ?([v|vs], [type|types])
    ; <bind-var> (v, type)
    ; <bind-strats> (vs, types)

  lookup-var = Env; resolve-all-unknown

rules // runtime support

  set-current-type = where(rules ( CurrentType := <id> ))
  get-current-type = CurrentType; resolve-all-unknown
  with-current-type(s) = 
      where(get-current-type => orig)
    ; set-current-type
    ; s
    ; get-current-type => result
    ; !orig
    ; set-current-type
    ; !result
    ; not(?Empty())
  
  try-init-stack = where(Stack <+ rules ( Stack := [] ))

  push-call =
      ?(def@SDefT(name,_,_,_), strats, types)
//    ; <debug(!"call ")> (name, strats, types, <get-current-type>)
    ; try-init-stack
    ; !(def, strats, types, <get-current-type>) => call
    ; (!Some(<skip-call>) <+ rules ( Stack := [call | <Stack>] ))

  pop-call =
      ?(def, strats, types)
    ; Stack => [_ | rest]
    ; rules (Stack := rest)

  skip-call =
      ?call
    ; <elem(smaller-eq-call)> (call, <Stack>)
    ; next-unknown-type

  smaller-eq-call = 
      ?((def1,strats1,types1,current1),(def2,strats2,types2,current2))
    ; <equal> (def1, def2)
    ; <smaller-eq-type> (current1, current2)
//    ; <debug(!"skip call: ")> (<?SDefT(<id>,_,_,_)>def1,strats1,types1,current1)

  smaller-eq-type =
      ?(type1, type2)
    ; rules ( NoBind := 1 )
    ; finally ( <match-pat> (<explode-type> type1, type2)
              , rules (NoBind := 0))

   may-assign =
        where(NoBind => 0
                <+ (not(NoBind); rules ( NoBind := 0 )))

rules // strategy management
  bind-strats = ?([],[])
  bind-strats = 
      ?([v|vs], [strat|strats])
    ; rules ( LocalStrats :+ v -> strat )
    ; <bind-strats> (vs, strats)

  lookup-strategy = ?name; <lookup-strategy(|name)> <AllStrats>

  lookup-strategy(|name) = <LocalStrats> name
  lookup-strategy(|name) = ?[strat@SDefT(name, _, _, _) | _]; !strat
  lookup-strategy(|name) = ?[_ | <lookup-strategy(|name)>]
  
signature constructors
  Unknown : String      -> Type
  UnknownList : String  -> Type
  Alt     : Type * Type -> Type
  Empty   :                Type
  Any     :                Type
  AnyList :                Type
