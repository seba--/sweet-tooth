module extract-generation-type
imports 
  libstratego-lib
imports 
  org/sugarj/languages/Stratego

rules
  main = io-wrap(extra-options,
    extract-generation-type-main)

  extra-options =
    ArgOption(
      "-desugar"
    , rules(DesugarName := <id>)
    , !"-desugar <strategy-name> Name of the desugaring strategy."
    )

rules // extract type
  extract-generation-type-main = 
      ?Specification([_,Strategies(<id>)])
    ; rules ( AllStrats := <id> )
    ; <set-current-type> <next-unknown-type>
    ; <lookup-strategy> <DesugarName>
    ; extract-generation-type


  extract-generation-type =
    // TODO implement variable scoping
      ?Scope(vars, body)
    ; <with-scoped-vars(extract-generation-type|vars)> body

  extract-generation-type =
      ?Seq(s1, s2)
    ; <extract-generation-type> s1
    ; <extract-generation-type> s2

  extract-generation-type =
      ?Match(pat)
    ; !(pat, <get-current-type>)
    ; match-pat

  extract-generation-type =
      ?Build(temp)
    ; <extract-generation-type-from-term> temp

  extract-generation-type =
    fatal-err(|"extract-generation-type is stuck")

rules // type matching
  match-pat =
      ?( Anno(Op(cons, kids), _)
       , cons#(kids'))
    ; <zip; map(match-pat)> (kids, kids')

  match-pat =
      ?( Anno(Op(cons, kids), _)
       , Unknown(_))
    ; <map(next-unknown-type)> kids => unknown-kids
    ; <zip; map(match-pat)> (kids, unknown-kids)

  match-pat =
      ?( Anno(Str(s), _)
       , s)

  match-pat =
      ?( Var(v)
       , type)
    ; if <lookup-var> v => pat
        then <match-pat> (pat, type)
        else <bind-var> (v, type)
      end

  match-pat =
    fatal-err(|"match pat is stuck")

rules // term typing
  extract-generation-type-from-term =
      ?Anno(Op(cons, kids), _)  
    ; !cons#(<map(extract-generation-type-from-term)> kids)

  extract-generation-type-from-term =
      ?Anno(Str(s), _)  
    ; !s

  extract-generation-type-from-term =
      ?Var(<id>)
    ; lookup-var

  extract-generation-type-from-term =
    fatal-err(|"extract-generation-type-from-term is stuck")

rules // auxiliary type functions
  set-current-type = rules ( CurrentType := <id> )
  get-current-type = CurrentType
  next-unknown-type = !Unknown(<newname> "X")

rules // name binding
  bind-var = 
      ?(name, type)
    ; rules ( Env :+ name -> type )

  lookup-var = Env

  with-scoped-vars(s|vars) = s

rules // strategy management
  lookup-strategy = ?name; <lookup-strategy(|name)> <AllStrats>

  lookup-strategy(|name) = ?[SDefT(name, [] , [], <id>) | _]
  lookup-strategy(|name) = ?[_ | <lookup-strategy(|name)>]
  
signature constructors
  Unknown : String -> Type