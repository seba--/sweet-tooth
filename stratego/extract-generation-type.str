module extract-generation-type
imports 
  libstratego-lib
imports 
  org/sugarj/languages/Stratego
imports
  stdlib-generation-types

rules
  main = io-wrap(extra-options,
    extract-generation-type-main)

  extra-options =
    ArgOption(
      "-desugar"
    , rules(DesugarName := <id>)
    , !"-desugar <strategy-name> Name of the desugaring strategy."
    )

rules // extract type
  extract-generation-type-main = 
      ?Specification([_,Strategies(<id>)])
    ; rules ( AllStrats := <id> )
    ; <set-current-type> <next-unknown-type>
    ; <lookup-strategy <+ fatal-err(|"Desugaring strategy undefined: ")> <DesugarName>
    ; ?SDefT(_, [], [], <id>)
    ; extract-generation-type


//  extract-generation-type = debug;fail

  extract-generation-type =
      ?Scope(vars, body)
        // TODO only scope `vars`, not all of the environment
    ; { Env:
        <extract-generation-type> body
      }

  extract-generation-type =
      ?Seq(s1, s2)
    ; <extract-generation-type> s1
    ; <extract-generation-type> s2

  extract-generation-type =
      ?Match(pat)
    ; !(pat, <get-current-type>)
    ; match-pat

  extract-generation-type =
      ?Build(temp)
    ; <build-term> temp
    ; set-current-type

  extract-generation-type =
      ?CallT(SVar(name), strats, terms)
    ; <lookup-strategy> name
    ; ?def@SDefT(_, vstrats, vterms, body)
    ; <map(build-term)> terms => types
    ; <push-call> (def, strats, types) => maybe-skip
    ; if <?Some(type)> maybe-skip
        then !type
        else finally(
               { LocalStrats, Env:
                   <bind-strats> (vstrats, strats)
                 ; <bind-vars> (vterms, types)
                 ; <extract-generation-type> body
               }
             , <pop-call> (def, strats, types)
             )
      end

  // call of stdlib function
  extract-generation-type =
      ?CallT(SVar(name), strats, terms)
    ; <not(lookup-strategy)> name
    ; <map(build-term)> terms => types
    ; def := SDefT(name, None(), None(), None())
    ; <push-call> (def, strats, types) => maybe-skip
    ; if <?Some(type)> maybe-skip
        then !type
        else finally(
               <stdlib-generation-type> (name, strats, types, <get-current-type>)
             , <pop-call> (def, strats, types)
             )
      end

  extract-generation-type =
      ?GuardedLChoice(cond,s1,s2)
    ; get-current-type => orig-type

    ; <extract-generation-type> cond
    ; if ?Empty()
        then <set-current-type> orig-type
           ; <extract-generation-type> s2
        else <extract-generation-type> s1 => t1
           ; get-current-type => pos-type
           ; <set-current-type> orig-type
           ; <extract-generation-type> s2 => t2
           ; get-current-type => neg-type
           // set current as merge of pos and neg
           ; <alternative-types; set-current-type> (pos-type, neg-type)
           // return result of s1 or s2
           ; <alternative-types> (t1, t2)
      end
        
  extract-generation-type =
      ?Id()
    ; get-current-type

  extract-generation-type =
    fatal-err(|"extract-generation-type is stuck")

rules // type matching
  match-pat =
      ?( Anno(Op(cons, kids), _)
       , cons#(kids'))
    ; <zip; map(match-pat)> (kids, kids')

  match-pat =
      ?( Anno(Op(cons, kids), _)
       , Unknown(name))
    ; <map(next-unknown-type)> kids => unknown-kids
    ; <bind-unknown> (name, cons#(unknown-kids))
    ; <zip; map(match-pat)> (kids, unknown-kids)

  match-pat =
      ?( Anno(Str(s), _)
       , Str([s]))

  match-pat =
      ?( Anno(Str(s), _)
       , Unknown(name))
    ; <bind-unknown> (name, Str([<next-unknown-type>]))

  match-pat =
      ?( Var(v)
       , type)
    ; if <lookup-var> v => var-type
        then <match-type> (var-type, type)
        else <bind-var> (v, type)
      end

  match-pat =
      ?( Wld()
       , _)

  match-pat =
      ?( Anno(Explode(term1, term2), _)
       , cons#(kids))
    ; <match-pat> (term1, Str([cons]))
    ; <match-pat> (term2, kids)

  match-pat =
      ?( Anno(Explode(term1, term2), _)
       , Unknown(_))
    ; <match-pat> (term1, <next-unknown-type>)
    ; <match-pat> (term2, <next-unknown-type>)

  match-pat =
    fatal-err(|"match pat is stuck")

rules // term typing
  build-term =
      ?Anno(Op("Nil", []), _)  
    ; ![]

  build-term =
      ?Anno(Op("Cons", [hd, tl]), _)  
    ; ![<build-term> hd | <build-term> tl]

  build-term =
      ?Anno(Op(cons, kids), _)  
    ; !cons#(<map(build-term)> kids)

  build-term =
      ?Anno(Str(s), _)  
    ; !Str([s])

  build-term =
      ?Var(<id>)
    ; lookup-var

  build-term =
    fatal-err(|"build-term is stuck")

rules // type matching
  // match-type : (expected, actual) -> true or false

  match-type =
      ?(Unknown(name), t)
    ; <bind-unknown> (name, t)
    ; !t

  match-type =
      debug(!"match type is stuck")
    ; !Empty()

rules // auxiliary type functions
  next-unknown-type = !Unknown(<newname> "X")
  unknown-or(s) = ?Unknown(_) <+ s

  alternative-types = ?(t, t); !t
  alternative-types = 
      ?(c#(kids), c#(kids'))
    ; !c#(<zip; alternative-types> (kids, kids'))
  alternative-types = ?(t1, t2); !Alt(t1, t2)

  bind-unknown =
      ?(Unknown(name), type)
    ; rules ( UnknownEnv :+ name -> type)
  bind-unknown =
      ?(name, type)
    ; rules ( UnknownEnv :+ name -> type)

  resolve-unknown =
      ?Unknown(<UnknownEnv>)
  resolve-all-unknown =
      bottomup(try(resolve-unknown))

rules // name binding
  bind-var = 
      ?(name, type)
    ; rules ( Env :+ name -> type )

  bind-vars = ?([],[])
  bind-vars = 
      ?([v|vs], [type|types])
    ; <bind-var> (v, type)
    ; <bind-strats> (vs, types)

  lookup-var = Env; resolve-all-unknown

rules // runtime support

  set-current-type = rules ( CurrentType := <id> )
  get-current-type = CurrentType; resolve-all-unknown
  with-current-type(s) = 
      where(get-current-type => orig)
    ; set-current-type
    ; s
    ; get-current-type => result
    ; !orig
    ; set-current-type
  
  try-init-stack = where(Stack <+ rules ( Stack := [] ))

  push-call =
      ?(def@SDefT(name,_,_,_), strats, types)
//  ; <debug(!"call ")> (name, strats, types, <get-current-type>)
    ; try-init-stack
    ; !(def, strats, types, <get-current-type>) => call
    ; (!Some(<skip-call>) <+ rules ( Stack := [call | <Stack>] ))

  pop-call =
      ?(def, strats, types)
    ; Stack => [_ | rest]
    ; rules (Stack := rest)

  skip-call =
      ?call
    ; <elem> (call, <Stack>)
    ; get-current-type

rules // strategy management
  bind-strats = ?([],[])
  bind-strats = 
      ?([v|vs], [strat|strats])
    ; rules ( LocalStrats :+ v -> strat )
    ; <bind-strats> (vs, strats)

  lookup-strategy = ?name; <lookup-strategy(|name)> <AllStrats>

  lookup-strategy(|name) = <LocalStrats> name
  lookup-strategy(|name) = ?[strat@SDefT(name, _, _, _) | _]; !strat
  lookup-strategy(|name) = ?[_ | <lookup-strategy(|name)>]
  
signature constructors
  Unknown : String      -> Type
  Alt     : Type * Type -> Type
  Empty   :                Type