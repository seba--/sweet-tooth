module simplify-generation-type
imports extract-generation-type

rules
  simplify-type =
      ?type
    ; collect-all(?Unknown(_))
    ; filter(\ x -> <single-occurrence(|x)> type \ )
    ; map(?Unknown(<id>); !(<id>,Any()); do-bind-unknown)

    ; !type
    ; collect-all(?UnknownList(_))
    ; filter(\ x -> <single-occurrence(|x)> type \ )
    ; map(?UnknownList(<id>); !(<id>,AnyList()); do-bind-unknown)

    ; !type
    ; rebuild-type
    ; innermost(reduce-universal)

  rebuild-type = resolve-all-unknown

//  single-occurrence(|x) = debug(<write-to-string> x); fail
  single-occurrence(|x) = ?x
  single-occurrence(|x) = 
      ?Alt(t1,t2)
    ; (<collect-one(?x)> t1 + <collect-one(?x)> t2)
  single-occurrence(|x) = 
      where(collect-all(?x); not(?[]))
    ; ?cons#(xs)
    ; <single-occurrence-list(|x)> xs

//  single-occurrence-list(|x) = debug(<write-to-string> x); fail
  single-occurrence-list(|x) = 
      ?[hd | tl]
    ; <collect-all(?x);?[]> tl
    ; <single-occurrence(|x)> hd
  single-occurrence-list(|x) = 
      ?[hd | tl]
    ; <not(single-occurrence(|x))> hd
    ; <single-occurrence-list(|x)> tl


  reduce-universal : Alt(t,t) -> t
  reduce-universal : Alt(Alt(t1, t2), t3) -> Alt(t1, Alt(t2, t3))
//  reduce-universal : Alt(c#(kids1),c#(kids2)) -> c#(<zip;map(alternative-types)> (kids1,kids2))
  reduce-universal =
      (?Alt(AnyList,list) + ?Alt(list,AnyList))
    ; <is-list-type> list
    ; <not(one(is-significant))> list
    ; !AnyList
  reduce-universal =
      (?Alt([AnyList],[list]) + ?Alt([list],[AnyList]))
    ; <is-list-type> list
    ; <not(one(is-significant))> list
    ; ![AnyList]
  reduce-universal = []#(reduce-universal-list)
  reduce-universal : Alt(t1, Alt(t1, t2)) -> Alt(t1, t2)
  reduce-universal : Alt(t1, Alt(t2, t1)) -> Alt(t1, t2)
  reduce-universal : Str([]#(list)) -> Str(<prefer-anylist> list)

  reduce-universal-list =
      ?[AnyList, AnyList | rest]
    ; ![Any | rest]
  reduce-universal-list =
      ?[AnyList, <is-list-type> | rest]
    ; ![AnyList | rest]
  reduce-universal-list =
      ?[<is-list-type>, AnyList | rest]
    ; ![AnyList | rest]
  reduce-universal-list =
      ?[x | rest2]
    ; ![x | <reduce-universal-list> rest2]

  prefer-anylist =
      ?[]
    ; fail
  prefer-anylist =
      [?Alt(AnyList,other) + ?Alt(other,AnyList) | ?rest]
    ; <not(is-significant)> other
    ; ![AnyList | rest]
  prefer-anylist =
      [id | prefer-anylist]

  is-significant = is-string
  is-significant = ?Str(_)
  is-significant = ?[x|xs]; (<is-significant> x + <is-significant> xs)
  is-significant = ?Alt(t1,t2); (<is-significant> t1 + <is-significant> t2)
  is-significant = not(?Any + ?AnyList + ?Unknown(_) + ?UnknownList(_))
  is-significant = not(?Any + ?AnyList); debug(!"is-significant is stuck: "); fail
