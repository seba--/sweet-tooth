definition

module org/sugarj/languages/SugarJ
imports org/sugarj/languages/Java 
        org/sugarj/languages/Sdf2
        org/sugarj/languages/Stratego
        org/sugarj/languages/EditorServices
        org/sugarj/languages/Sugar
        org/sugarj/languages/Model

exports
  lexical syntax
    [\ \t\12\r\n] -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\12\r\n]

  context-free syntax %% ToplevelDeclaration
    JavaPackageDec -> ToplevelDeclaration
    JavaImportDec -> ToplevelDeclaration
    JavaTypeDec -> ToplevelDeclaration
    SugarDec -> ToplevelDeclaration

  context-free start-symbols
  	CompilationUnit

  context-free syntax
    JavaPackageDec? JavaImportDec* (JavaTypeDec | SugarDec)* -> CompilationUnit {cons("CompilationUnit")}

  %% sugar declaration
  context-free syntax
    SugarDecHead SugarBody                 -> SugarDec {cons("SugarDec")}

    AnnoOrSugarMod* "sugar" JavaId            -> SugarDecHead       {cons("SugarDecHead")}
    JavaAnno                                  -> AnnoOrSugarMod     
    SugarMod                                  -> AnnoOrSugarMod     
    JavaPublic                                -> SugarMod           

    "{" SugarDefElem* "}"    -> SugarBody       {cons("SugarBody")}

  lexical restrictions
    "sugar" -/- [a-zA-Z0-9\'\-\_]

  %% editor service declaration
  context-free syntax
    EditorServicesDecHead EditorServicesBody   -> SugarDec              {cons("EditorServicesDec")}
    AnnoOrSugarMod* "editor" "services" JavaId -> EditorServicesDecHead {cons("EditorServicesDecHead")}
    "{" EditorServiceSection* "}"              -> EditorServicesBody    {cons("EditorServicesBody")}

  %% check declarations
  context-free syntax
    ChecksDecHead ChecksBody   -> ToplevelDeclaration              {cons("ChecksDec")}
    AnnoOrSugarMod* "analysis" JavaId -> ChecksDecHead {cons("ChecksDecHead")}
    AnnoOrSugarMod* "checks" JavaId -> ChecksDecHead {cons("ChecksDecHead")}
    "{" CheckingRule* "}"              -> ChecksBody    {cons("ChecksBody")}

    "errors" CheckingRuleBody*                          -> CheckingRule     {cons("CheckingRuleErrors")}
    "warnings" CheckingRuleBody*                        -> CheckingRule     {cons("CheckingRuleWarnings")}
    "notes" CheckingRuleBody*                           -> CheckingRule     {cons("CheckingRuleNotes")}
    StrategoTerm "=" StrategoTerm                          -> CheckingRuleBody {cons("RuleNoCond")}
    StrategoTerm "=" StrategoTerm "where" StrategoStrategy -> CheckingRuleBody {cons("Rule")}
    StrategoTerm "=" StrategoTerm StrategoRuleCond+        -> CheckingRuleBody {cons("Rule"), avoid}
    "rules" StrategoDef*        -> CheckingRule {cons("Rules")}

  %% MDD declarations
  context-free syntax
    ModelDecHead ModelBody         -> ToplevelDeclaration     {cons("ModelDec")}
    AnnoOrSugarMod* "model" JavaId "instantiates" JavaId -> ModelDecHead {cons("ModelDecHead")}
    "{" ModelTerm "}"              -> ModelBody    {cons("ModelBody")}

    TransformationDecHead TransformationBody   -> ToplevelDeclaration {cons("TransDec")}
    AnnoOrSugarMod* "transformation" JavaId -> TransformationDecHead {cons("TransDecHead")}
    "{" TransformationDef "}" -> TransformationBody {cons("TransBody")}

    JavaTypeName -> ModuleName          
    ModuleName "=" -> ImportAs {cons("ImportAs")}
    "import" ImportAs? TransformationAppExpr ";" -> JavaImportDec {cons("TransImportDec")}
    "import" ImportAs  ModuleName            ";" -> JavaImportDec {cons("TypeImportAsDec")}
 

