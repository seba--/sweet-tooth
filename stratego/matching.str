module matching

imports 
  extract-generation-type
imports
 libstratego-lib
 libstratego-xtc

rules
  matching-main = 
    io-wrap(matching-option,
      strip-annos
    ; ?(type,main-term)
    ; !main-term
    ; collect-all(
          !(type, <id>)
        ; top-match
      )
    ; concat
    )

  matching-option =
    ArgOption(
      "-t"
    , debug
    ; open-stream
    ; debug
    ; rules(GenerationType := <id>)
    , !"-t <file>       File that contains the type to match against"
    )

rules
  top-match =
      ?(type,term)
    ; <is-list-type> type
    ; <is-list> term
    ; <top-match-list> (type,term)
    ; filter(where(?(<id>,_); gt0))

  top-match = 
      ?(type,term)
    ; <not(is-list-type)> type
    ; <match> (type, term) => score
    ; if <geq0> score
        then ![(<id>,term)]
        else ![]
      end


//  top-match-list = (truncate;debug, truncate;debug);fail

  top-match-list =
      ?(Alt(t1, t2), t)
    ; <top-match-list <+ ![]> (t1, t) => resA
    ; <top-match-list <+ ![]> (t2, t) => resB
    ; <conc> (resA, resB)

  top-match-list =
      ?([], list)
    ; <is-list> list
    ; ![(0,[])]

  top-match-list =
      ?(AnyList, list)
    ; ![(0, [])]

  top-match-list = 
      ?([AnyList|xs], ys)
    ; <top-match-list> (xs,ys)

  top-match-list =
      ?([x|xs], [y|ys])
    ; <match <+ !(-1)> (x,y) => score1
    ; if <geq0> score1
        then <top-match-list <+ ![]> (xs,ys)
           ; map(cons-top-match-result(|score1,y)) => resA
        else ![] => resA
      end
    ; <top-match-list <+ ![]> ([x|xs], ys) => resB
    ; <conc> (resA, resB)

//  top-match-list = (truncate;debug, truncate;debug); fail

  cons-top-match-result(|score1,x) =
//      debug(!"in:  ");
      ?(score,list)
    ; !(<add> (score1, score),[x|list])
//    ; debug(!"out: ")

rules
//  match = (truncate;debug, truncate;debug);fail

  match =
      ?(Unknown(name), t)
    ; <do-bind-unknown> (name, t)
    ; !0

  match = 
      ?(UnknownList(name), t)
    ; <is-list> t
    ; <do-bind-unknown> (name, t)
    ; !0

  match = 
      ?(Any, t)
    ; !0

  match =
      ?(AnyList, t)
    ; <is-list> t
    ; !0

  match =
      ?(Alt(t1, t2), t)
    ; <match <+ !(-1)> (t1, t) => score1
    ; <match <+ !(-1)> (t2, t) => score2
    ; <max; not(?(-1))> (score1,score2) 

  match = 
      ?(Str([]), "")
    ; !1
  match = 
      ?a@(Str(ss), str)
    ; <match-string> (ss, <explode-string> str)

  match =
      ?(xs, ys)
    ; <is-list> xs
    ; <is-list> ys
    ; <match-list> (xs, ys)

  match =
      ?(cons#(xs), cons#(ys))
    // TODO: use a single fold instead
    ; <zip; map(match); sum> (xs, ys) => kid-score
    ; <inc> kid-score

  match =
      not(?(AnyList, <not(is-list)>))
    ; not(?(Alt(_,_), _))
    ; not(?(cons1#(_),cons2#(_)); <not(equal)> (cons1,cons2))
//    ; not((is-list,is-list))
//    ; where(?(cons#(xs),cons2#(xs2)); <debug> cons; <debug> xs; <debug> cons2; <debug> xs2)
//    ; debug(!"match is stuck: ")
    ; fail

rules
  match-list =
      ?([], list)
    ; <is-list> list
    ; !0

  match-list =
      ?(AnyList, list)
    ; <is-list> list
    ; !0

  match-list = 
      ?([AnyList|xs], ys)
    ; <match-list> (xs,ys)

  match-list =
      ?([x|xs], [y|ys])
    ; <match <+ !(-1)> (x,y) => score1
    ; <match-list <+ !(-1)> (xs,ys) => score2
    ; <add-if-pos> (score1, score2) => scoreA

    ; <match-list <+ !(-1)> ([x|xs], ys) => scoreB
    ; <max> (scoreA, scoreB) => scoreRes
    ; <gt> (scoreRes, 0)
    ; !scoreRes

rules
  match-string =
      ?([],[])
    ; !0

  match-string =
      ?([Any|ss], [_|chars])
    ; <match-string> (ss,chars)

  match-string =
      ?([AnyList|ss], chars)
    ; <flexible-match-string> (ss,chars)

  match-string =
      ?([s|ss], chars)
    ; <is-string> s
    ; <left-match> (chars, <explode-string> s) => rest
    ; <match-string> (ss, rest) => score
    ; <inc> score

  match-string =
      ?(Alt(_,_), _)
    ; fatal-err(|"Alt occurs in String (match-string): ")

rules
  flexible-match-string =
      ?([], [])
    ; !0
  flexible-match-string =
      ?(ss, [c|chars])
    ; <match-string <+ !(-1)> (ss, [c|chars]) => score1
    ; <flexible-match-string <+ !(-1)> (ss, chars) => score2
    ; <max; not(?(-1))> (score1,score2) 


rules
  add-if-pos =
      ?(x,y)
    ; <gt> (x,-1)
    ; <gt> (y,-1)
    ; <add> (x,y)
  add-if-pos = 
      !(-1)

  gt0 = where(?n; <gt> (n,0))
  geq0 = where(?n; <geq> (n,0))