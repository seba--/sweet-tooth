module stdlib-generation-types
imports
  extract-generation-type
rules
// ****** string ********
  stdlib-generation-type =
      ?("concat_strings_0_0", [], [], list)
    ; <concat-string-types> list

  stdlib-generation-type =
      ?("conc_strings_0_0", [], [], list)
    ; <conc-string-types> list

  stdlib-generation-type =
      ?("trim_chars_1_0", [strat], [], list)
    ; <trim-chars-types(lift-strat(|strat))> list

  stdlib-generation-type =
      ?("explode_string_0_0", [], [], list)
    ; <explode-string-type> list

  stdlib-generation-type =
      ?("implode_string_0_0", [], [], list)
    ; <implode-string-type> list

  stdlib-generation-type =
      ?("to_upper_0_0", [], [], list)
    ; <to-upper-type> list


// ****** list ********
  stdlib-generation-type =
      ?("elem_0_0", [], [], pair)
    ; <elem-types> pair

  stdlib-generation-type =
      ?("concat_0_0", [], [], list)
    ; <concat-types> list

  stdlib-generation-type =
      ?("conc_1_0", [], [], tuple)
    ; <conc-types> tuple

  stdlib-generation-type =
      ?("map_1_0", [strat], [], list)
    ; <ensure-cons-expansion> list => list'
    ; <map-types(lift-strat(|strat))> list'

  stdlib-generation-type =
      ?("mapconcat_1_0", [strat], [], list)
    ; <ensure-cons-expansion> list => list'
    ; <map-types(lift-strat(|strat)); concat-types> list'

  stdlib-generation-type =
      ?("filter_1_0", [strat], [], list)
    ; <ensure-cons-expansion> list => list'
    ; <filter-types(lift-strat(|strat))> list'

  stdlib-generation-type =
      ?("foldr_2_0", [strat1, strat2], [], list)
    ; <ensure-cons-expansion> list => list'
    ; <foldr-types(lift-strat(|strat1), lift-strat(|strat2))> list'

  stdlib-generation-type =
      ?("flatten_list_0_0", [], [], list)
    ; <flatten-list-types> list

  stdlib-generation-type =
      ?("separate_by_0_1", [], [type], list)
    ; <separate-by-types(|type)> list


// ****** generic, traversal ********
  stdlib-generation-type =
      ?("equal_0_0", [], [], list)
    ; <equal-types> list

  stdlib-generation-type =
      ?("collect_all_1_0", [strat], [], list)
    ; <collect-all-types(lift-strat(|strat))> list

  stdlib-generation-type =
      ?("bottomup_1_0", [strat], [], list)
    ; <bottomup-types(lift-strat(|strat))> list

  stdlib-generation-type =
    fatal-err(|"Unknown stdlib function: ")

  lift-strat(|strat) = with-current-type(<extract-generation-type> strat)

rules
  concat-string-types = ?UnknownList(_)
                      ; !Str([<next-unknown-type>])
  concat-string-types = ?Unknown(name)
                      ; <bind-unknown> (name, <next-unknown-listtype>)
                      ; !Str([<next-unknown-type>])
  concat-string-types = Alt(concat-string-types, concat-string-types)
  concat-string-types = ?[]; !Str([])
  concat-string-types = ?[Str(ss)]; !Str(ss)
  concat-string-types = ?[Unknown(v)]; !Str([Unknown(v)])
  concat-string-types = 
      ?[Str(ss) , Str(ss2) | list]
    ; <concat-string-types> [Str(<conc> (ss, ss2)) | list]
  concat-string-types = 
      ?[Str(ss) , Unknown(v) | list]
    ; <concat-string-types> [Str(<conc> (ss, [Unknown(v)])) | list]
  concat-string-types = 
      ?[Unknown(v) , Str(ss) | list]
    ; <concat-string-types> [Str(<conc> ([Unknown(v)], ss)) | list]
  concat-string-types =
      ?[Alt(t1,t2) | list]
    ; <alternative-types> (<concat-string-types> [t1|list], <concat-string-types> [t2|list])

  conc-string-types = ?Unknown(name)
                    ; !Str([<next-unknown-type>])
  conc-string-types = Alt(conc-string-types, conc-string-types)
  conc-string-types = ?""#(xs); <concat-string-types> xs
  conc-string-types = fatal-err(|"conc-string-types is stuck")
  
 
  trim-chars-types(s) = 
      ?Unknown(name)
    ; !Str([<next-unknown-type>]) => t
    ; <bind-unknown> (name, t)
    ; !Str([<next-unknown-type>])
  trim-chars-types(s) = 
    Empty()
  trim-chars-types(s) = 
      ?Alt(t1,t2)
    ; <alternative-types> (<trim-chars-types(s)> t1, <trim-chars-types(s)> t2)
  trim-chars-types(s) = 
  // TODO right-hand side
      ?Str([Unknown(name)|rest])
    ; !Str([<next-unknown-type>|rest])
  // TODO actual implementation
  trim-chars-types(s) = fatal-err(|"trim-chars-types is stuck: ")

  explode-string-type = 
      ?Unknown(name)
    ; !Str([<next-unknown-type>]) => t
    ; <bind-unknown> (name, t)
    ; next-unknown-listtype
  explode-string-type = 
    Empty()
  explode-string-type = 
      ?Alt(t1,t2)
    ; <alternative-types> (<explode-string-type> t1, <explode-string-type> t2)
  explode-string-type = 
      ?Str([])
    ; ![]
  explode-string-type = 
      ?Str([Unknown(name)|rest])
    ; next-unknown-listtype => t
    ; <bind-unknown> (name, t)  
    ; !<cons-types> (t, <explode-string-type> Str(rest))
  explode-string-type = 
      ?Str([UnknownList(name)|rest])
    ; <cons-types> (UnknownList(name), <explode-string-type> Str(rest))
  explode-string-type = 
      ?Str([ss | rest])
    ; <is-string> ss
    ; <conc-types> (<explode-string> ss, <explode-string-type> Str(rest))
  explode-string-type = fatal-err(|"explode-string-type is stuck: ")

  implode-string-type = 
      ?Unknown(name)
    ; next-unknown-listtype => t
    ; <bind-unknown> (name, t)
    ; !Str([<next-unknown-type>])
  implode-string-type = 
      ?UnknownList(name)
    ; !Str([<next-unknown-type>]) 
 implode-string-type = 
    Empty()
  implode-string-type = 
      ?Alt(t1,t2)
    ; <alternative-types> (<implode-string-type> t1, <implode-string-type> t2)
  implode-string-type = 
      ?[]
    ; !Str([])
  implode-string-type = 
      ?[Unknown(name)|rest]
    ; <implode-string-type> rest => Str(rest-str)
    ; !Str(<cons-types> (Unknown(name), rest-str))
  implode-string-type = 
      ?[UnknownList(name)|rest]
    ; <implode-string-type> rest => Str(rest-str)
    ; !Str(<cons-types> (UnknownList(name), rest-str))
  implode-string-type = 
      split-fetch-keep(not(is-char)) => (chars, r, rest)
    ; <not(?[])> chars
    ; <implode-string> chars => ss
    ; <implode-string-type> [r|rest] => Str(rest-str)
    ; !Str(<cons-types> (ss, rest-str))
  implode-string-type = fatal-err(|"implode-string-type is stuck: ")

  to-upper-type = 
      ?Unknown(name)
    ; next-unknown-type
  to-upper-type = 
    Empty()
  to-upper-type = 
      ?Alt(t1,t2)
    ; <alternative-types> (<to-upper-type> t1, <to-upper-type> t2)
  to-upper-type = 
      is-char; to-upper
  to-upper-type = fatal-err(|"to-upper-type is stuck: ")


  elem-types =
      ?Unknown(name)
    ; next-unknown-type
  elem-types = 
    Empty()
  elem-types = 
      ?Alt(t1,t2)
    ; <alternative-types> (<elem-types> t1, <elem-types> t2)
  elem-types = 
      ?(el, Unknown(name))
    ; next-unknown-type
  elem-types = 
      ?(el, UnknownList(name))
    ; next-unknown-type
  elem-types = 
      ?(el, Alt(t1,t2))
    ; <alternative-types> (<elem-types> (el,t1), <elem-types> (el,t2))
  elem-types = 
      ?(_,[]); !Empty
  elem-types = 
      ?(el, [x | xs])
    ; <equal-types> (el,x)
    ; !x
  elem-types = 
      ?(el, [_ | xs])
    ; <elem-types> (el, xs)
  elem-types = fatal-err(|"elem-types is stuck: ")

  map-types(s) = ?UnknownList(_); next-unknown-listtype
  map-types(s) = ?Unknown(name)
               ; <bind-unknown> (name, <next-unknown-listtype>)
               ; next-unknown-listtype
  map-types(s) = Empty()
  map-types(s) = ?Alt(t1,t2)
               ; <alternative-types> (<map-types(s)> t1, <map-types(s)> t2)
  map-types(s) = []
  map-types(s) = ?[x|xs]
               ; <cons-types> (<s> x, <map-types(s)> xs)
  map-types(s) = ?[UnknownList(name)|xs]
               ; <cons-types> (<next-unknown-listtype>, <map-types(s)> xs)
  map-types(s) = fatal-err(|"map-types is stuck: ")

  filter-types(s) = 
      (?UnknownList(name) + ?Unknown(name))
    ; next-unknown-type
  filter-types(s) = Empty()
  filter-types(s) = ?Alt(t1,t2)
                  ; <alternative-types> (<filter-types(s)> t1, <filter-types(s)> t2)
  filter-types(s) = []
  filter-types(s) = ?[x|xs]
                  ; if <s> x => t
                      then <cons-types> (t, <filter-types(s)> xs)
                      else <filter-types(s)> xs
                    end
  filter-types(s) = fatal-err(|"filter-types is stuck: ")

  foldr-types(nil,cons) =
      (?UnknownList(name) + ?Unknown(name))
    ; next-unknown-type
  foldr-types(nil,cons) = 
    Empty()
  foldr-types(nil,cons) = 
      ?Alt(t1,t2)
    ; <alternative-types> (<foldr-types(nil,cons)> t1, <foldr-types(nil,cons)> t2)
  foldr-types(nil,cons) = 
      ?[]
    ; nil
  foldr-types(nil,cons) = 
      ?[x | xs]
    ; <foldr-types(nil,cons)> xs => ys
    ; <cons> (x, ys)
  foldr-types(nil,cons) = fatal-err(|"foldr-types is stuck: ")

  flatten-list-types =
      ?UnknownList(_)
    ; next-unknown-listtype
  flatten-list-types = 
      ?Unknown(name)
    ; <bind-unknown> (name, <next-unknown-listtype>)
    ; next-unknown-listtype
  flatten-list-types = 
    Empty()
  flatten-list-types = 
      ?Alt(t1,t2)
    ; <alternative-types> (<flatten-list-types> t1, <flatten-list-types> t2)
  flatten-list-types = 
      ?[]
  flatten-list-types = 
      ?[x | xs]
    ; <is-list-type> x
    ; <conc-types> (x, <flatten-list-types> xs)
  flatten-list-types = 
      ?[x | xs]
    ; <cons-types> (x, <flatten-list-types> xs)
  flatten-list-types = fatal-err(|"flatten-list-types is stuck: ")

  separate-by-types(|type) =
      ?UnknownList(_)
    ; next-unknown-listtype
  separate-by-types(|type) = 
      ?Unknown(name)
    ; <bind-unknown> (name, <next-unknown-listtype>)
    ; next-unknown-listtype
  separate-by-types(|type) = 
    Empty()
  separate-by-types(|type) = 
      ?Alt(t1,t2)
    ; <alternative-types> (<separate-by-types(|type)> t1, <separate-by-types(|type)> t2)
  separate-by-types(|type) = 
      ?[]
  separate-by-types(|type) = 
      ?[x | xs]
    ; <cons-types> (x, <cons-types> (type, <separate-by-types(|type)> xs))
  separate-by-types(|type) = fatal-err(|"separate-by-types is stuck: ")

  collect-all-types(s) = Empty()
  collect-all-types(s) = ?Unknown(name); next-unknown-listtype
  collect-all-types(s) = ?Alt(t1,t2)
                       ; <alternative-types> (<collect-all-types(s)> t1, <collect-all-types(s)> t2)
  collect-all-types(s) = where((![<s>] <+ ![]) => xs)
                       ; ?_#(<map(collect-all-types(s))>); concat-types => ys
                       ; <conc-types> (xs, ys)
  collect-all-types(s) = fatal-err(|"collect-all-types is stuck: ")

  bottomup-types(s) = Empty()
  bottomup-types(s) = ?Unknown(name); next-unknown-type
  bottomup-types(s) = ?Alt(t1,t2)
                    ; <alternative-types> (<bottomup-types(s)> t1, <bottomup-types(s)> t2)
  bottomup-types(s) = not(?UnknownList(_))
                    ; all(bottomup-types(s))
                    ; s
  bottomup-types(s) = fatal-err(|"bottomup-types is stuck: ")

  concat-types = ?Unknown(name)
               ; <bind-unknown> (name, <next-unknown-listtype>)
               ; next-unknown-listtype
  concat-types = ?UnknownList(name)
               ; next-unknown-listtype
  concat-types = Alt(concat-types, concat-types)
  concat-types = []
  concat-types = ?[Empty() | <concat-types>]
  concat-types = 
      ?[Unknown(name) | rest]
    ; next-unknown-listtype => t
    ; <bind-unknown> (name, t)
    ; <cons-types> (t, <concat-types> rest)
  concat-types = ?[list | rest]
               ; where(<is-list <+ ?UnknownList(_)> list)
               ; <conc-types> (list, rest)
  concat-types = ?[Alt(t1,t2) | rest]
               ; <alternative-types> (<concat-types> [t1 | rest], <concat-types> [t2 | rest])
  concat-types = fatal-err(|"concat-types is stuck: ")

  conc-types = ?Unknown(name)
             ; next-unknown-listtype
  conc-types = Alt(conc-types, conc-types)
  conc-types = (is-list,is-list); conc
  conc-types = ?(Empty(),<id>)
  conc-types = ?(<id>,Empty())
  conc-types = ?(<id>,Empty())
  conc-types = ?(Alt(t1,t2),list)
             ; <alternative-types> (<conc-types> (t1, list), <conc-types> (t2, list))
  conc-types = ?(list, Alt(t1, t2))
             ; <alternative-types> (<conc-types> (list, t1), <conc-types> (list, t2))
  conc-types = ?(UnknownList(name),rest); <cons-types> (UnknownList(name), rest)
  conc-types = fatal-err(|"conc-types is stuck: ")

  is-list-type = ?[] 
  is-list-type = ?AnyList
  is-list-type = ?UnknownList(_)
  is-list-type = [id|is-list-type]
  is-list-type = Alt(is-list-type,is-list-type)

  cons-types = ?(x, xs); <is-list> xs; ![x|xs]
  cons-types = ?(x, t@UnknownList(name)); ![x,t]
  cons-types = ?(x, Unknown(name))
             ; next-unknown-listtype => t
             ; <bind-unknown> (name, t)
             ; ![x,t]
  cons-types = ?(x, Alt(t1, t2))
             ; <alternative-types> (<cons-types> (x, t1), <cons-types> (x, t2))

  equal-types =
      ?Unknown(name)
    ; next-unknown-type
  equal-types = 
    Empty()
  equal-types = 
      ?Alt(t1,t2)
    ; <alternative-types> (<equal-types> t1, <equal-types> t2)
  equal-types = 
      ?(t1, t2)
    ; <match-pat> (t1, t2)
  equal-types = fatal-err(|"equal-types is stuck: ")




rules
  ensure-cons-expansion =
      ?[]
  ensure-cons-expansion =
      ?[_|_]
  ensure-cons-expansion =
      ?UnknownList(name)
    ; ![<next-unknown-type>, <next-unknown-listtype>] => type
    ; <bind-unknown> (name, type)
  ensure-cons-expansion =
      ?Unknown(name)
    ; next-unknown-listtype => type
    ; <bind-unknown> (name, type)
    ; <ensure-cons-expansion> type
  ensure-cons-expansion =
      Alt(ensure-cons-expansion, ensure-cons-expansion)
  ensure-cons-expansion =
      fatal-err(|"ensure-cons-expansion is stuck: ")
