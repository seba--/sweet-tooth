module org/sugarj/stdlib/StdTrans
imports libstrategolib

imports org/sugarj/transformations/analysis/Data
imports org/sugarj/transformations/analysis/SugarAnalyze
imports org/sugarj/transformations/ATerm
imports org/sugarj/transformations/GenerateSignatures
imports org/sugarj/transformations/LayoutSugar
imports org/sugarj/transformations/Renaming
imports org/sugarj/stdlib/outline-library

signature constructors
  CompilationUnit : List(Decl) -> CompilationUnit

strategies
  compile-error = ?CompileError(_,_)
  compile-error(|msg) = !CompileError(msg,<id>)
  
  desugar = fail
  changed-tree(s) = ?t; s; not(equal(|t))
  
  unlocked-bottomup(s) = ?Locked(t) < id + all(unlocked-bottomup(s)); s
  traverse(s) = compile-error <+ unlocked-bottomup(try(s; traverse(s)))
  unlock = bottomup(try(?Locked(<id>)))

  desugar-main = internal-main
  internal-main = traverse(desugar); unlock
  // main = io-wrap(internal-main)
  
strategies
  debug-strat(what, s) =
    debug-analysis(!<conc-strings>("IN ", <what>, ": "));
    (s < debug-analysis(!<conc-strings>("OUT ", <what>, ": "))
       + debug-analysis(!<conc-strings>("FAILED ", <what>, ": ")); fail)

strategies
  generate-desugared :
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      filename := $[[<remove-extension> path]-desug.aterm];
      result   := <desugar-main> selected

  generate-desugared-analysis :
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      filename := $[[<remove-extension> path]-desug.aterm];
      <load-analysis-data <+ warn(|"Could not load analysis data.")> ast;
      result   := <desugar-main; nice-analysis-data-term> selected
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, ast)
    with
      filename := <guarantee-extension(|"aterm")> path

  generate-aterm-analysis:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      <load-analysis-data <+ warn(|"Could not load analysis data.")> ast;
      result   := <nice-analysis-data-term> selected
  
signature
  constructors
    Locked : a -> a
    CompileError : A * B -> C

signature
  constructors
    Some : a -> Option(a)
    None : Option(a)


signature
  constructors
    Cons : a * List(a) -> List(a)
    Nil  : List(a)
    Conc : List(a) * List(a) -> List(a)
