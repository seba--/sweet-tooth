module stdlib-generation-types
imports
  extract-generation-type
rules
  stdlib-generation-type =
      ?("concat_strings_0_0", [], [], list)
    ; <unknown-or(concat-string-types)> list

  stdlib-generation-type =
      ?("map_1_0", [strat], [], list)
    ; <unknown-or(map(unknown-or(with-current-type(<extract-generation-type> strat))))> list

  stdlib-generation-type =
      ?("collect_all_1_0", [strat], [], type)
    ; <unknown-or(collect-all(with-current-type(<extract-generation-type> strat)))> type

  stdlib-generation-type =
      ?("collect_1_0", [strat], [], type)
    ; <unknown-or(collect(with-current-type(<extract-generation-type> strat)))> type

  stdlib-generation-type = 
      ?("bottomup_1_0", [strat], [], type)
    ; <unknown-or(bottomup(with-current-type(<extract-generation-type> strat)))> type

  stdlib-generation-type = 
      ?("is_string_0_0", [], [], type)
    ; <match-type> (Str([<next-unknown-type>]), type)

  stdlib-generation-type = 
      ?("foldr_2_0", [nil, cons], [], list)
    ; nil-case  :=   Seq( Match(Anno(Op("Nil",[]),[])), nil)
    ; cons-case :=   Seq( Match(Anno(Op("Cons", [Var("y"), Var("ys")]), []))
                   , Seq( Build(Var("ys"))
                   , Seq( CallT(SVar("foldr_2_0"), [nil, cons], [])
                   , Seq( Match(Var("ys2"))
                   , Seq( Build(Anno(Op("", [Var("y"), Var("ys2")]), []))
                   ,      cons)))))
    ; body := Scope([Var("y"), Var("ys")], GuardedLChoice(nil-case,Id(),cons-case))
    ; <with-current-type(<extract-generation-type> body)> list

  stdlib-generation-type =
    fatal-err(|"Unknown stdlib function: ")


rules
  concat-string-types = ?[]; !Str([])
  concat-string-types = ?[Str(ss)]; !Str(ss)
  concat-string-types = ?[Unknown(v)]; !Str([Unknown(v)])
  concat-string-types = 
      ?[Str(ss) , Str(ss2) | list]
    ; <concat-string-types> [Str(<conc> (ss, ss2)) | list]
  concat-string-types = 
      ?[Str(ss) , Unknown(v) | list]
    ; <concat-string-types> [Str(<conc> (ss, [Unknown(v)])) | list]
  concat-string-types = 
      ?[Unknown(v) , Str(ss) | list]
    ; <concat-string-types> [Str(<conc> ([Unknown(v)], ss)) | list]
