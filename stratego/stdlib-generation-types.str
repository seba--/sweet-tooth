module stdlib-generation-types
imports
  extract-generation-type
rules
  stdlib-generation-type =
      ?("concat_strings_0_0", [], [], list)
    ; <concat-string-types> list

  stdlib-generation-type =
      ?("map_1_0", [strat], [], list)
    ; <map-types(lift-strat(|strat))> list

  stdlib-generation-type =
      ?("foldr_2_0", [strat1, strat2], [], list)
    ; <foldr-types(lift-strat(|strat1), lift-strat(|strat2))> list

  stdlib-generation-type =
      ?("flatten_list_0_0", [], [], list)
    ; <flatten-list-types> list

  stdlib-generation-type =
      ?("separate_by_0_1", [], [type], list)
    ; <separate-by-types(|type)> list

  stdlib-generation-type =
      ?("collect_all_1_0", [strat], [], list)
    ; <collect-all-types(lift-strat(|strat))> list

  stdlib-generation-type =
      ?("bottomup_1_0", [strat], [], list)
    ; <bottomup-types(lift-strat(|strat))> list

  stdlib-generation-type =
    fatal-err(|"Unknown stdlib function: ")

  lift-strat(|strat) = unknown-or(with-current-type(<extract-generation-type> strat))

rules
  concat-string-types = ?UnknownList(_)
                      ; !Str([<next-unknown-type>])
  concat-string-types = ?Unknown(name)
                      ; <bind-unknown> (name, <next-unknown-listtype>)
                      ; !Str([<next-unknown-type>])
  concat-string-types = ?[]; !Str([])
  concat-string-types = ?[Str(ss)]; !Str(ss)
  concat-string-types = ?[Unknown(v)]; !Str([Unknown(v)])
  concat-string-types = 
      ?[Str(ss) , Str(ss2) | list]
    ; <concat-string-types> [Str(<conc> (ss, ss2)) | list]
  concat-string-types = 
      ?[Str(ss) , Unknown(v) | list]
    ; <concat-string-types> [Str(<conc> (ss, [Unknown(v)])) | list]
  concat-string-types = 
      ?[Unknown(v) , Str(ss) | list]
    ; <concat-string-types> [Str(<conc> ([Unknown(v)], ss)) | list]

  map-types(s) = ?UnknownList(_); next-unknown-listtype
  map-types(s) = ?Unknown(name)
               ; <bind-unknown> (name, <next-unknown-listtype>)
               ; next-unknown-listtype
  map-types(s) = Empty()
  map-types(s) = ?Alt(t1,t2)
               ; <alternative-types> (<map-types(s)> t1, <map-types(s)> t2)
  map-types(s) = []
  map-types(s) = [s | map-types(s)]
  map-types(s) = fatal-err(|"map-types is stuck: ")

  foldr-types(nil,cons) =
      ?UnknownList(_)
    ; next-unknown-type
  foldr-types(nil,cons) = 
      ?Unknown(name)
    ; <bind-unknown> (name, <next-unknown-listtype>)
    ; next-unknown-type
  foldr-types(nil,cons) = 
    Empty()
  foldr-types(nil,cons) = 
      ?Alt(t1,t2)
    ; <alternative-types> (<foldr-types(nil,cons)> t1, <foldr-types(nil,cons)> t2)
  foldr-types(nil,cons) = 
      ?[]
    ; nil
  foldr-types(nil,cons) = 
      ?[x | xs]
    ; <foldr-types(nil,cons)> xs => ys
    ; <cons> (x, ys)
  foldr-types(nil,cons) = fatal-err(|"foldr-types is stuck: ")

  flatten-list-types =
      ?UnknownList(_)
    ; next-unknown-listtype
  flatten-list-types = 
      ?Unknown(name)
    ; <bind-unknown> (name, <next-unknown-listtype>)
    ; next-unknown-listtype
  flatten-list-types = 
    Empty()
  flatten-list-types = 
      ?Alt(t1,t2)
    ; <alternative-types> (<flatten-list-types> t1, <flatten-list-types> t2)
  flatten-list-types = 
      ?[]
  flatten-list-types = 
      ?[x | xs]
    ; <is-list-type> x
    ; <conc-types> (x, <flatten-list-types> xs)
  flatten-list-types = 
      [id | flatten-list-types]
  flatten-list-types = fatal-err(|"flatten-list-types is stuck: ")

  separate-by-types(|type) =
      ?UnknownList(_)
    ; next-unknown-listtype
  separate-by-types(|type) = 
      ?Unknown(name)
    ; <bind-unknown> (name, <next-unknown-listtype>)
    ; next-unknown-listtype
  separate-by-types(|type) = 
    Empty()
  separate-by-types(|type) = 
      ?Alt(t1,t2)
    ; <alternative-types> (<separate-by-types(|type)> t1, <separate-by-types(|type)> t2)
  separate-by-types(|type) = 
      ?[]
  separate-by-types(|type) = 
      ?[x | xs]
    ; ![x , type | <separate-by-types(|type)> xs]
  separate-by-types(|type) = fatal-err(|"separate-by-types is stuck: ")

  collect-all-types(s) = Empty()
  collect-all-types(s) = ?Unknown(name); next-unknown-listtype
  collect-all-types(s) = ?Alt(t1,t2)
                       ; <alternative-types> (<collect-all-types(s)> t1, <collect-all-types(s)> t2)
  collect-all-types(s) = where((![<s>] <+ ![]) => xs)
                       ; ?_#(<map(collect-all-types(s))>); concat-types => ys
                       ; <conc-types> (xs, ys)
  collect-all-types(s) = fatal-err(|"collect-all-types is stuck: ")

  bottomup-types(s) = Empty()
  bottomup-types(s) = ?Unknown(name); next-unknown-type
  bottomup-types(s) = ?Alt(t1,t2)
                       ; <alternative-types> (<bottomup-types(s)> t1, <bottomup-types(s)> t2)
  bottomup-types(s) = not(?UnknownList(_))
                    ; all(bottomup-types(s))
                    ; s
  bottomup-types(s) = fatal-err(|"collect-all-types is stuck: ")

  concat-types = []
  concat-types = ?[Empty() | <concat-types>]
  concat-types = ?[list | rest]
               ; where(<is-list <+ ?UnknownList(_)> list)
               ; <conc-types> (list, rest)
  concat-types = ?[Alt(t1,t2) | rest]
               ; <alternative-types> (<concat-types> [t1 | rest], <concat-types> [t2 | rest])
  concat-types = fatal-err(|"bottomup-types is stuck: ")

  conc-types = (is-list,is-list); conc
  conc-types = ?(Empty(),<id>)
  conc-types = ?(<id>,Empty())
  conc-types = ?(<id>,Empty())
  conc-types = ?(Alt(t1,t2),list)
             ; <alternative-types> (<conc-types> (t1, list), <conc-types> (t2, list))
  conc-types = ?(list, Alt(t1, t2))
             ; <alternative-types> (<conc-types> (list, t1), <conc-types> (list, t2))
  conc-types = ?(UnknownList(name),<is-list => rest>); ![UnknownList(name) | rest]
  conc-types = ?(hd,UnknownList(name)); ![hd, UnknownList(name)]
  conc-types = fatal-err(|"conc-types is stuck: ")

  is-list-type = ?[] 
  is-list-type = ?AnyList
  is-list-type = ?UnknownList(_)
  is-list-type = [id|is-list-type]
  is-list-type = Alt(is-list-type,is-list-type)